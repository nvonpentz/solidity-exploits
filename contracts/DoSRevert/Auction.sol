pragma solidity ^0.4.4;

/*
This is an exmample of a DoS attack where an attacker locks out
an auction to more bids after their bid.

The problem is that the contract requires the current leader
to be paid before a new leader is assigned.  So, if the
current leader cannot be paid, no one can make new bids, and
the current leader wins by default.

An attacker can make themselves unpayable by creating a contract
with no fallback function.  See ./AuctionAttacker.sol.
*/

// INSECURE
contract Auction {
    address currentLeader;
    uint highestBid;
    
    function Auction () public {
    }
    
    function bid() payable public {
        require(msg.value > highestBid);
        require(currentLeader.send(highestBid)); // Refund the old leader, if it fails then revert
        currentLeader = msg.sender;
        highestBid = msg.value;
    }
    
    function getHighestBid() public constant returns(uint){
        return highestBid;
    }
    
    function getCurrentLeader() public constant returns(address){
        return currentLeader;
    }
}
