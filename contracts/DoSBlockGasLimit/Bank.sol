pragma solidity ^0.4.4;

/*
This contract demonstrates a failure mode in which refund payments are sent
to users at once using a loop.  If the user runs out of gas, none of these
transactions will take effect.

This is intended to be run with testrpc specifying 100 accounts:
	
	testrpc -a 100

*/

contract Bank {
	mapping(address=>uint) public balances;
    address public payer;
    address[] public addressesToRefund;
	
    function Bank() public payable {
        payer = msg.sender;
        balances[msg.sender] = msg.value;
        addressesToRefund.push(msg.sender);
    }
	
	function signUp() public payable {
		balances[msg.sender] = msg.value;
		addressesToRefund.push(msg.sender);
	}
	
	function cashOutEveryone() public {
	   require(payer == msg.sender);
    	for (uint i=0; i< addressesToRefund.length; i++ ) {
    	    
    	    address addrToSend = addressesToRefund[i];
    	    uint amountToRefund = balances[addrToSend];
    	    
    	    require(addrToSend.send(amountToRefund)); // require implies all state changes done by the function
    	    										  // will not take if any of these transactions fail or 
    	    										  // if the gas limit is reached
    	    balances[addrToSend] = 0;
    	}
	}

	function getNumberOfAccounts() public constant returns (uint) {
		return addressesToRefund.length;
	}

    function getBalance() constant public returns(uint) {
        return this.balance;
    }
}