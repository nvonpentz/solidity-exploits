pragma solidity ^0.4.4;

// THIS CODE HAS BUGS, DO NOT USE
contract Reentrance {
    /// Mapping of ether shares of the contract.
    mapping(address => uint) public shares;
    
    function Reentrance() payable public {
        shares[msg.sender] += msg.value;
    }
    
    // Deposit to contract
    function deposit() payable public {
    	shares[msg.sender] += msg.value;
    }

    // Withdraw your share
    // BUG: Allows contracts invoking this function to make extra calls before shares[msg.sender] is updated
    function withdraw() public {
        uint amountToWithdraw = shares[msg.sender];
        msg.sender.call.value(amountToWithdraw)(); // At this point, the caller's code is executed, and can call withdraw again
        shares[msg.sender] = 0;
    }

    // added to simplify testing
    function getBalance() constant public returns(uint) {
        return this.balance;
    }
}