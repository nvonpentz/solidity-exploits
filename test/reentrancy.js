var Reentrance = artifacts.require("./Reentrance.sol");
var ReentranceAttacker = artifacts.require("./ReentranceAttacker.sol");

contract('Reentrance', function(accounts) {

	// // send funds to Reentrance account from account[0]
	// it ("should be able to accept funds from user and associate user with those funds", function() {
	// 	return Reentrance.deployed().then(function(instance) {
	// 		ReentranceInstance = instance;
	// 		return ReentranceInstance.deposit({from: accounts[0], value: web3.toWei(5, "ether")});
	// 	}).then(function() {
	// 		// get reentrance contract balance
	// 		return web3.fromWei(web3.eth.getBalance(ReentranceInstance.address), "ether").toNumber();
	// 	}).then(function(contractBalance) {
	// 		// check balance after deposit
	// 		assert.equal(contractBalance, 5, "doesn't send 5 ether");
	// 		// get shares for deposited account
	// 		return ReentranceInstance.readShares({from: accounts[0]});
	// 	}).then(function(acc1Shares) {
	// 		var acc1SharesInEther = web3.fromWei(acc1Shares, "ether");
	// 		assert.equal(acc1SharesInEther, 5, "doesn't send 5 ether");
	// 	});
	// });

	// instantiate other contract
	// have contract donate
	it ("should be able to receive funds from another contract", function() {
		return Reentrance.deployed().then(function(reentinstance) {
			ReentranceInstance = reentinstance;
		}).then(function() {
			return ReentranceAttacker.deployed().then(function(attackerinstance) {
				ReentranceAttackerInstance = attackerinstance;
				// send funds to reentrance contract from account 1

				// return web3.eth.sendTransaction({from: accounts[0], to: ReentranceAttackerInstance.address, value: web3.toWei(5, "ether")});
				return ReentranceInstance.deposit({from: accounts[1], value: web3.toWei(5, "ether")});
			}).then(function() {
				return web3.fromWei(web3.eth.getBalance(ReentranceInstance.address), "ether").toNumber();
			}).then(function(reenBalance) {
				assert.equal(reenBalance, 5, "reentrace contract did not receive original funds");
				// deposite to reentrance contract from attacker contract
				return ReentranceAttackerInstance.depositToExternal(ReentranceInstance.address, {from: web3.eth.accounts[0], value: web3.toWei(5, "ether")})
			}).then(function() {
				return web3.fromWei(web3.eth.getBalance(ReentranceInstance.address), "ether").toNumber();
				// return web3.fromWei(web3.eth.getBalance(ReentranceInstance.address), "ether").toNumber();
			}).then(function(reentrancBalance) {
				console.log("reentracne balance after attack:");
				console.log(reentrancBalance);
			});
			// .then(function(attackBalanceOnReentranceContract){
			// 	console.log("attackBalanceOnReentranceContract");
			// 	console.log(attackBalanceOnReentranceContract);
			// 	// assert.equal(attackerBalanceOnReentranceContract, 4, "unable to send funds from attacker to reentrance contract");
			// });
		});
	});
});


/*
 Reentrance.deployed().then(function(instance) { re = instance; });
 ReentranceAttacker.deployed().then(function(instance) { att = instance; });
 re.deposit({from: web3.eth.accounts[1], value: web3.toWei(5, "ether")});
 re.deposit({from: web3.eth.accounts[0], value: web3.toWei(5, "ether")});


 web3.eth.sendTransaction({from: web3.eth.accounts[0], to: att.address, value: web3.toWei(5, "ether")})
 att.depositToExternal(re.address, {from: web3.eth.accounts[0], value: web3.toWei(5, "ether")})

 att.withdrawFromExternal(re.address, {from: web3.eth.accounts[0], value: web3.toWei(5, "ether")})

 re.readShares({from: web3.eth.accounts[1]})
 re.readShares({from: web3.eth.accounts[0]})
 re.readShares({from: att.address})

 web3.fromWei(web3.eth.getBalance(att.address), "ether").toNumber();
 web3.fromWei(web3.eth.getBalance(re.address), "ether").toNumber();
 web3.fromWei(web3.eth.getBalance(web3.eth.accounts[0]), "ether").toNumber();




*/


















