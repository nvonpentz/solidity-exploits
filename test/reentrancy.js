var Reentrance = artifacts.require("./Reentrance.sol");
var ReentranceAttacker = artifacts.require("./ReentranceAttacker.sol");

contract('Reentrance', function(accounts) {
	it ("should deploy Reentrance contact with a balance of 5 wei", function() {
		return Reentrance.deployed().then(function(instance) {
			ReentranceInstance = instance;
			return ReentranceInstance.getBalance();
		}).then(function(reentranceBalance) {
			// check total balance of contract
			assert.equal(5, reentranceBalance);
			return ReentranceInstance.shares(accounts[0]);
		}).then(function(firstAccountReentranceShares) {
			//check shares that belong to first account
			assert.equal(5, firstAccountReentranceShares);
		});
	});

	it ("should increase funds of Reentrance when the attacker deposits", function() {
		return Reentrance.deployed().then(function(instance) {
			ReentranceInstance = instance;
		}).then(function () {
			return ReentranceAttacker.deployed().then(function(attackerInstance) {
				ReentranceAttackerInstance = attackerInstance;
				return ReentranceAttackerInstance.depositToExternal(ReentranceInstance.address, {from: accounts[1], value: 5});
			}).then(function() {
				return ReentranceInstance.getBalance();
			}).then(function(reentranceBalance) {
				// check if attacker succesfully added funds to reentrance
				assert.equal(reentranceBalance, 10);
				return ReentranceInstance.shares(ReentranceAttackerInstance.address);
			}).then(function(attackerReentranceShares) {
				assert.equal(attackerReentranceShares, 5);
			});
		});
	});

	it ("should have no funds after the attacker withdraws", function() {
		return Reentrance.deployed().then(function(instance) {
			ReentranceInstance = instance;
		}).then(function () {
			return ReentranceAttacker.deployed().then(function(attackerInstance) {
				ReentranceAttackerInstance = attackerInstance;
				return ReentranceAttackerInstance.withdrawFromExternal(ReentranceInstance.address, {from: accounts[1]});
			}).then(function() {
				return ReentranceInstance.getBalance();
			}).then(function(reentranceBalanceAfterHack) {
				// check that funds are depleated
				assert.equal(reentranceBalanceAfterHack, 0);
				return ReentranceAttackerInstance.getBalance();
			}).then(function(attackerBalanceAfterHack) {
				// check all funds are stolen
				assert.equal(attackerBalanceAfterHack, 10);
			});
		});
	});
});












