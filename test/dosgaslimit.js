var Bank = artifacts.require("./Bank.sol");

// function signUpAllAccounts(paymentInstance, accounts) {
// 	Bank.deployed().then(function(instance) {
// 		Bank = instance;
// 		var currentAccount = accounts[0];

// 		signUpAccounts(Bank, accounts, accounts.length);
// 	})
// }

// return new Promise ((resolve, revert) => {
// 	resolve(Bank.signUp({from: account, value: 5}));
// });

function signUpAccountsWrapper(Bank, accounts, accNumber) {
	return new Promise((resolve, reject) => {
		signUpAccounts(Bank, accounts, accNumber).then(function() {
			resolve();
		});
	});
}

function signUpAccounts(Bank, accounts, accNumber) {
	console.log("signing up acc:");
	console.log(accNumber);

	return new Promise((resolve, reject) => {
		Bank.signUp({from: accounts[accNumber], value: 5}).then(function(){
			if (accNumber > 0) { // check if there are still accounts to be signed up
				signUpAccounts(Bank, accounts, accNumber-1);
				resolve();
			}
			resolve();
		});	
	});
}

contract('Bank', function(accounts) {
	it ("should be unable to pay out all the accounts I sign up", function() {
		return Bank.deployed().then(function(instance) {
			Bank = instance;
			return signUpAccountsWrapper(Bank, accounts, accounts.length-1);
		}).then(function() {
			return Bank.getNumberOfAccounts();
		}).then(function(numberOfAccts) {
			console.log("this is the number of accounts");
			console.log(numberOfAccts);
		});
	});

	// it ("should have signed up all the accounts", function() {
	// 	return Bank.deployed().then(function(instance) {
	// 		Bank = instance;
	// 		return Bank.getNumberOfAccounts();
	// 	}).then(function(numberOfAccts) {
	// 		console.log(numberOfAccts);
	// 	});
	// });
});